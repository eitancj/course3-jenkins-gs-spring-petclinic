<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1316.vd2290d3341a_f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2144.v077a_d1928a_40"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2144.v077a_d1928a_40">
      <jobProperties/>
      <triggers>
        <string>hudson.triggers.SCMTrigger</string>
      </triggers>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>pipeline script testing run from vscode through the Jenkins Runner plugin.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <hudson.triggers.SCMTrigger>
          <spec>* * * * *</spec>
          <ignorePostCommitHooks>false</ignorePostCommitHooks>
        </hudson.triggers.SCMTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3717.va_180a_fe9d3cd">
    <script>pipeline {
    agent any
    triggers { pollSCM(&apos;* * * * *&apos;) }

    stages {
        stage(&apos;Checkout&apos;) {
            steps {
                // Fetch latest spring-clinic git repo
                git branch: &apos;main&apos;, url: &apos;https://github.com/eitancj/course3-jenkins-gs-spring-petclinic.git&apos;
            }
        }
        stage(&apos;Build&apos;) {
            steps {
                // Avoid JaCoCo reporting error by runnin clean-verify
                //sh &apos;./mvnw -Dtest=\\!VetTests clean verify&apos;

                // Create JAR file
                sh &apos;./mvnw -Dtest=\\!VetTests clean compile&apos;
            }
        }
    }
    
    post {
        // always collect JUnit test results
        always {
            echo &quot;\nALWAYYYYYYS!\n&quot;
            //junit &apos;**/target/surefire-reports/TEST-*.xml&apos;
        }
        // following successful build, archive the JAR file
        success {
            //archiveArtifacts &apos;target/*.jar&apos;
            echo &quot;\nJob Succeeded!\n&quot;
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>